{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1","program":"/Users/kalomidin/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","shlex","/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","debuginfo=2","-C","metadata=c59962e021012799","-C","extra-filename=-c59962e021012799","--out-dir","/Users/kalomidin/Desktop/raft_example/raft_example/target/rls/debug/deps","-L","dependency=/Users/kalomidin/Desktop/raft_example/raft_example/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/kalomidin/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/kalomidin/Desktop/raft_example/raft_example/target/rls/debug/deps/libshlex-c59962e021012799.rmeta"},"prelude":{"crate_id":{"name":"shlex","disambiguator":[16819832048276580567,7989940154324743999]},"crate_root":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src","external_crates":[{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[12480940028815742386,17133840292323062676]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12740277115278631702,12640810556085455126]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[9032649326521538135,12667967411968509476]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[10009283058736322418,8662397509334631840]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[3924216512132021142,13433065908605684942]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[3030377414627030993,4885163689723098329]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[13235301763130876389,11956675772311029582]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5839480494490908876,4697973287732230237]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[1041246640194432752,18216372201816767321]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[4759184321302818619,12022396673976004994]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[1295962249923865998,4753204618089216455]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[11309261669264167917,12633313349437080871]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[11563747115584760512,7975991426192958756]}},{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[2660116328215505580,9545010463301493925]}}],"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":306,"byte_end":8064,"line_start":6,"line_end":229,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":306,"byte_end":8064,"line_start":6,"line_end":229,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":18},{"krate":0,"index":25},{"krate":0,"index":29},{"krate":0,"index":30}],"decl_id":null,"docs":" Same idea as (but implementation not directly based on) the Python shlex module.  However, this\n implementation does not support any of the Python module's customization because it makes\n parsing slower and is fairly useless.  You only get the default settings of shlex.split, which\n mimic the POSIX shell:\n http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":13},"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1132,"byte_end":1137,"line_start":22,"line_end":22,"column_start":12,"column_end":17},"name":"Shlex","qualname":"::Shlex","value":"Shlex { line_no, had_error }","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17}],"decl_id":null,"docs":" An iterator that takes an input string and splits it into the words using the same syntax as\n the POSIX shell.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":16},"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1240,"byte_end":1247,"line_start":25,"line_end":25,"column_start":9,"column_end":16},"name":"line_no","qualname":"::Shlex::line_no","value":"usize","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" The number of newlines read so far, plus one.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":17},"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1613,"byte_end":1622,"line_start":30,"line_end":30,"column_start":9,"column_end":18},"name":"had_error","qualname":"::Shlex::had_error","value":"bool","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" An input string is erroneous if it ends while inside a quotation or right after an\n unescaped backslash.  Since Iterator does not have a mechanism to return an error, if that\n happens, Shlex just throws out the last token, ends the iteration, and sets 'had_error' to\n true; best to check it after you're done iterating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1665,"byte_end":1668,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<Shlex>::new","value":"fn (in_str: &'a str) -> Self","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":29},"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":5784,"byte_end":5789,"line_start":153,"line_end":153,"column_start":8,"column_end":13},"name":"split","qualname":"::split","value":"fn (in_str: &str) -> Option<Vec<String>>","parent":null,"children":[],"decl_id":null,"docs":" Convenience function that consumes the whole string at once.  Returns None if the input was\n erroneous.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":6048,"byte_end":6053,"line_start":160,"line_end":160,"column_start":8,"column_end":13},"name":"quote","qualname":"::quote","value":"fn (in_str: &str) -> Cow<str>","parent":null,"children":[],"decl_id":null,"docs":" Given a single word, return a string suitable to encode it as a shell argument.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1642,"byte_end":1647,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":4929,"byte_end":4934,"line_start":126,"line_end":126,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":1642,"byte_end":1647,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":13},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kalomidin/.cargo/registry/src/github.com-1ecc6299db9ec823/shlex-0.1.1/src/lib.rs","byte_start":4929,"byte_end":4934,"line_start":126,"line_end":126,"column_start":23,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":13},"to":{"krate":2,"index":3602}}]}